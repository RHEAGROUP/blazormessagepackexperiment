@page "/"

@using System.Diagnostics
@using System.Text

@inject HttpClient HttpClient;

<PageTitle>Index</PageTitle>

<h1>MessagePack Test Environment</h1>

<div id="parentDiv"> 
	<div id="MessagePack"> 
		<button @onclick="this.QueryMessagePack">MessagePack</button>
		<button @onclick="this.CancelMessagePackQuery">Cancel</button>
		<InputTextArea id="MessagePackResults" style="width: 700px;height: 300px;" @bind-Value="this.messagePackResults"></InputTextArea>
	</div> 
	<div id="JSON"> 
		<button @onclick="this.QueryJson">JSON</button>
		<button @onclick="this.CancelJsonQuery">Cancel</button>
		<InputTextArea id="JSONResults" style="width: 700px;height: 300px;" @bind-Value="this.jSONResults"></InputTextArea>
	</div> 
</div> 

@code
{
	private string messagePackResults = "";

	private string jSONResults = "";

	private CancellationTokenSource jsonCts;

	private CancellationTokenSource messagePackCts;

	private void CancelJsonQuery()
	{
		this.jsonCts?.Cancel();
	}

	private void CancelMessagePackQuery()
	{
		this.messagePackCts?.Cancel();
	}

	/// <summary>
	/// Query data as Json
	/// </summary>
	/// <returns></returns>
	private async Task QueryJson()
	{
		this.jSONResults = string.Empty;

		this.jsonCts = new CancellationTokenSource();
		var cancellationToken = this.jsonCts.Token;

		this.HttpClient.DefaultRequestHeaders.Clear();
		this.HttpClient.DefaultRequestHeaders.TryAddWithoutValidation("Accept", "application/json; ecss-e-tm-10-25; version=1.0.0");

		// warm up
		await this.QueryBySizeJson(1, cancellationToken);

		long payloadSize = 0;

		var sb = new StringBuilder();
		sb.AppendLine("========================== JSON TEST ===========================");
		this.jSONResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of     2 objects; ");
		var metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeJson(1, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		var averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.jSONResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of    20 objects; ");
		metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeJson(10, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.jSONResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of   200 objects; ");
		metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeJson(100, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.jSONResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of  2000 objects; ");
		metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeJson(1000, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.jSONResults = sb.ToString();
		StateHasChanged();
		
		sb.Append("50 iterations of 20000 objects; ");
		metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeJson(10000, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.jSONResults = sb.ToString();
		StateHasChanged();
		
	    sb.Append("50 iterations of 200000 objects; ");
	    metrics = new List<DeserializationMetrics>();
	    for (int i = 0; i < 50; i++)
	    {
	        var deserializationMetrics = await this.QueryBySizeJson(100000, cancellationToken);
	        metrics.Add(deserializationMetrics);
	        payloadSize = deserializationMetrics.Size;
	    }
	    averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
	    sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
	    this.jSONResults = sb.ToString();
	    StateHasChanged();

	    sb.Append("50 iterations of 2000000 objects; ");
	    metrics = new List<DeserializationMetrics>();
	    for (int i = 0; i < 50; i++)
	    {
	        var deserializationMetrics = await this.QueryBySizeJson(1000000, cancellationToken);
	        metrics.Add(deserializationMetrics);
	        payloadSize = deserializationMetrics.Size;
	    }
	    averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
	    sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
	    this.jSONResults = sb.ToString();
	    StateHasChanged();

	    sb.AppendLine("========================= DOME =================================");
	    this.jSONResults = sb.ToString();
	    StateHasChanged();
	}

	/// <summary>
	/// Query data as MessagePack
	/// </summary>
	/// <returns></returns>
	private async Task QueryMessagePack()
	{
		this.messagePackResults = string.Empty;

		this.messagePackCts = new CancellationTokenSource();
		var cancellationToken = this.messagePackCts.Token;

		this.HttpClient.DefaultRequestHeaders.Clear();
		this.HttpClient.DefaultRequestHeaders.TryAddWithoutValidation("Accept", "application/msgpack; ecss-e-tm-10-25; version=1.0.0");

		//warm up
		await this.QueryBySizeMessagePack(1, cancellationToken);

		long payloadSize = 0;

		var sb = new StringBuilder();

		sb.AppendLine("======================= MessagePack TEST =======================");
		this.messagePackResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of     2 objects; ");
		var metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeMessagePack(1, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		var averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.messagePackResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of    20 objects; ");
		metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeMessagePack(10, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.messagePackResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of   200 objects; ");
		metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeMessagePack(100, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.messagePackResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of  2000 objects; ");
		metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeMessagePack(1000, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.messagePackResults = sb.ToString();
		StateHasChanged();

		sb.Append("50 iterations of 20000 objects; ");
		metrics = new List<DeserializationMetrics>();
		for (int i = 0; i < 50; i++)
		{
			var deserializationMetrics = await this.QueryBySizeMessagePack(10000, cancellationToken);
			metrics.Add(deserializationMetrics);
			payloadSize = deserializationMetrics.Size;
		}
		averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
		sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
		this.messagePackResults = sb.ToString();
		StateHasChanged();
		
	    sb.Append("50 iterations of 200000 objects; ");
	    metrics = new List<DeserializationMetrics>();
	    for (int i = 0; i < 50; i++)
	    {
	        var deserializationMetrics = await this.QueryBySizeMessagePack(100000, cancellationToken);
	        metrics.Add(deserializationMetrics);
	        payloadSize = deserializationMetrics.Size;
	    }
	    averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
	    sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
	    this.messagePackResults = sb.ToString();
	    StateHasChanged();

	    sb.Append("50 iterations of 2000000 objects; ");
	    metrics = new List<DeserializationMetrics>();
	    for (int i = 0; i < 50; i++)
	    {
	        var deserializationMetrics = await this.QueryBySizeMessagePack(1000000, cancellationToken);
	        metrics.Add(deserializationMetrics);
	        payloadSize = deserializationMetrics.Size;
	    }
	    averageMilliseconds = metrics.Select(x => x.ElapsedMilliseconds).Average();
	    sb.AppendLine($"{payloadSize} bytes; Mean [ms]: {averageMilliseconds}");
	    this.messagePackResults = sb.ToString();
	    StateHasChanged();

	    sb.AppendLine("========================= DOME =================================");
	    this.messagePackResults = sb.ToString();
	    StateHasChanged();


	}

	/// <summary>
	/// Queries data by amount of things using MessagePack
	/// </summary>
	/// <param name="amount">
	/// the requested amount
	/// </param>
	/// <param name="cancellationToken">
	/// The <see cref="CancellationToken"/>
	/// </param>
	/// <returns>
	/// an awaitable <see cref="Task"/>
	/// </returns>
	private async Task<DeserializationMetrics> QueryBySizeMessagePack(int amount, CancellationToken cancellationToken)
	{
		var serializer = new MessagePackSerializer();

		var httpResponseMessage = await this.HttpClient.GetAsync($"/things/{amount}", cancellationToken);

		var stream = await httpResponseMessage.Content.ReadAsStreamAsync(cancellationToken);

		var sw = Stopwatch.StartNew();

		var things = await serializer.Deserialize(stream, cancellationToken);

		var elapsedMilliseconds = sw.ElapsedMilliseconds;

		var deserializationMetrics = new DeserializationMetrics
		{
			Size = stream.Length,
			Amount = things.Count(),
			ElapsedMilliseconds = elapsedMilliseconds
		};

		return deserializationMetrics;
	}

	/// <summary>
	/// Queries data by amount of things using JSON
	/// </summary>
	/// <param name="amount">
	/// the requested amount
	/// </param>
	/// <param name="cancellationToken">
	/// The <see cref="CancellationToken"/>
	/// </param>
	/// <returns>
	/// an awaitable <see cref="Task"/>
	/// </returns>
	private async Task<DeserializationMetrics> QueryBySizeJson(int amount, CancellationToken cancellationToken)
	{
		var httpResponseMessage = await this.HttpClient.GetAsync($"/things/{amount}", cancellationToken);

		var stream = await httpResponseMessage.Content.ReadAsStreamAsync(cancellationToken);

		var sw = Stopwatch.StartNew();

		var jsonSerializer = new MessagePack.JsonSerializer();

		var things  = await jsonSerializer.Deserialize(stream, cancellationToken);

		var elapsedMilliseconds = sw.ElapsedMilliseconds;

		var deserializationMetrics = new DeserializationMetrics
		{
			Size = stream.Length,
			Amount = things.Count(),
			ElapsedMilliseconds = elapsedMilliseconds
		};

		return deserializationMetrics;
	}
}
